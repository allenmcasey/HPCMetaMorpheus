// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CROSSLINKSPECTRALMATCH_H_
#define FLATBUFFERS_GENERATED_CROSSLINKSPECTRALMATCH_H_

#include "flatbuffers/flatbuffers.h"

#include "MatchedFragmentIon_generated.h"
#include "PeptideWithSetModifications_generated.h"
#include "FdrInfo_generated.h"

struct SerializedCrosslinkSpectralMatch;
struct SerializedCrosslinkSpectralMatchBuilder;

struct SerializedCrosslinkSpectralMatchVec;
struct SerializedCrosslinkSpectralMatchVecBuilder;

struct SerializedCrosslinkSpectralMatch FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SerializedCrosslinkSpectralMatchBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NOTCHVALUE = 4,
    VT_SCANNUMBER = 6,
    VT_XLPROTEINPOS = 8,
    VT_MATCHEDFRAGMENTIONSSIZE = 10,
    VT_LPOSITIONSSIZE = 12,
    VT_XLRANKSSIZE = 14,
    VT_PRECURSORSCANNUMBER = 16,
    VT_SCANEXPERIMENTALPEAKS = 18,
    VT_SCANPRECURSORCHARGE = 20,
    VT_XLTOTALSCORE = 22,
    VT_DELTASCORE = 24,
    VT_SCORE = 26,
    VT_RUNNERUPSCORE = 28,
    VT_PEPTIDEMONOISOTOPICMASS = 30,
    VT_SCANRETENTIONTIME = 32,
    VT_TOTALIONCURRENT = 34,
    VT_SCANPRECURSORMONOISOTOPICPEAKMZ = 36,
    VT_SCANPRECURSORMASS = 38,
    VT_HASNOTCHVALUE = 40,
    VT_HASBETAPEPTIDE = 42,
    VT_HASPRECURSORSCANNUMBER = 44,
    VT_PSMCROSSTYPEASSTRING = 46,
    VT_FULLFILEPATH = 48,
    VT_DIGESTIONPARAMSSTRING = 50,
    VT_LPOSITIONS = 52,
    VT_XLRANKS = 54,
    VT_FDRINFO = 56,
    VT_PEPTIDE = 58,
    VT_IONS = 60
  };
  int32_t notchValue() const {
    return GetField<int32_t>(VT_NOTCHVALUE, 0);
  }
  int32_t scanNumber() const {
    return GetField<int32_t>(VT_SCANNUMBER, 0);
  }
  int32_t xlProteinPos() const {
    return GetField<int32_t>(VT_XLPROTEINPOS, 0);
  }
  int32_t matchedFragmentIonsSize() const {
    return GetField<int32_t>(VT_MATCHEDFRAGMENTIONSSIZE, 0);
  }
  int32_t lPositionsSize() const {
    return GetField<int32_t>(VT_LPOSITIONSSIZE, 0);
  }
  int32_t xlRanksSize() const {
    return GetField<int32_t>(VT_XLRANKSSIZE, 0);
  }
  int32_t precursorScanNumber() const {
    return GetField<int32_t>(VT_PRECURSORSCANNUMBER, 0);
  }
  int32_t scanExperimentalPeaks() const {
    return GetField<int32_t>(VT_SCANEXPERIMENTALPEAKS, 0);
  }
  int32_t scanPrecursorCharge() const {
    return GetField<int32_t>(VT_SCANPRECURSORCHARGE, 0);
  }
  double xlTotalScore() const {
    return GetField<double>(VT_XLTOTALSCORE, 0.0);
  }
  double deltaScore() const {
    return GetField<double>(VT_DELTASCORE, 0.0);
  }
  double score() const {
    return GetField<double>(VT_SCORE, 0.0);
  }
  double runnerUpScore() const {
    return GetField<double>(VT_RUNNERUPSCORE, 0.0);
  }
  double peptideMonoisotopicMass() const {
    return GetField<double>(VT_PEPTIDEMONOISOTOPICMASS, 0.0);
  }
  double scanRetentionTime() const {
    return GetField<double>(VT_SCANRETENTIONTIME, 0.0);
  }
  double totalIonCurrent() const {
    return GetField<double>(VT_TOTALIONCURRENT, 0.0);
  }
  double scanPrecursorMonoisotopicPeakMz() const {
    return GetField<double>(VT_SCANPRECURSORMONOISOTOPICPEAKMZ, 0.0);
  }
  double scanPrecursorMass() const {
    return GetField<double>(VT_SCANPRECURSORMASS, 0.0);
  }
  bool hasNotchValue() const {
    return GetField<uint8_t>(VT_HASNOTCHVALUE, 0) != 0;
  }
  bool hasBetaPeptide() const {
    return GetField<uint8_t>(VT_HASBETAPEPTIDE, 0) != 0;
  }
  bool hasPrecursorScanNumber() const {
    return GetField<uint8_t>(VT_HASPRECURSORSCANNUMBER, 0) != 0;
  }
  const flatbuffers::String *psmCrossTypeAsString() const {
    return GetPointer<const flatbuffers::String *>(VT_PSMCROSSTYPEASSTRING);
  }
  const flatbuffers::String *fullFilePath() const {
    return GetPointer<const flatbuffers::String *>(VT_FULLFILEPATH);
  }
  const flatbuffers::String *digestionParamsString() const {
    return GetPointer<const flatbuffers::String *>(VT_DIGESTIONPARAMSSTRING);
  }
  const flatbuffers::Vector<int32_t> *lPositions() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_LPOSITIONS);
  }
  const flatbuffers::Vector<int32_t> *xlRanks() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_XLRANKS);
  }
  const SerializedFdrInfo *fdrInfo() const {
    return GetPointer<const SerializedFdrInfo *>(VT_FDRINFO);
  }
  const SerializedPeptideWithSetModifications *peptide() const {
    return GetPointer<const SerializedPeptideWithSetModifications *>(VT_PEPTIDE);
  }
  const flatbuffers::Vector<flatbuffers::Offset<SerializedMatchedFragmentIon>> *ions() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<SerializedMatchedFragmentIon>> *>(VT_IONS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_NOTCHVALUE) &&
           VerifyField<int32_t>(verifier, VT_SCANNUMBER) &&
           VerifyField<int32_t>(verifier, VT_XLPROTEINPOS) &&
           VerifyField<int32_t>(verifier, VT_MATCHEDFRAGMENTIONSSIZE) &&
           VerifyField<int32_t>(verifier, VT_LPOSITIONSSIZE) &&
           VerifyField<int32_t>(verifier, VT_XLRANKSSIZE) &&
           VerifyField<int32_t>(verifier, VT_PRECURSORSCANNUMBER) &&
           VerifyField<int32_t>(verifier, VT_SCANEXPERIMENTALPEAKS) &&
           VerifyField<int32_t>(verifier, VT_SCANPRECURSORCHARGE) &&
           VerifyField<double>(verifier, VT_XLTOTALSCORE) &&
           VerifyField<double>(verifier, VT_DELTASCORE) &&
           VerifyField<double>(verifier, VT_SCORE) &&
           VerifyField<double>(verifier, VT_RUNNERUPSCORE) &&
           VerifyField<double>(verifier, VT_PEPTIDEMONOISOTOPICMASS) &&
           VerifyField<double>(verifier, VT_SCANRETENTIONTIME) &&
           VerifyField<double>(verifier, VT_TOTALIONCURRENT) &&
           VerifyField<double>(verifier, VT_SCANPRECURSORMONOISOTOPICPEAKMZ) &&
           VerifyField<double>(verifier, VT_SCANPRECURSORMASS) &&
           VerifyField<uint8_t>(verifier, VT_HASNOTCHVALUE) &&
           VerifyField<uint8_t>(verifier, VT_HASBETAPEPTIDE) &&
           VerifyField<uint8_t>(verifier, VT_HASPRECURSORSCANNUMBER) &&
           VerifyOffset(verifier, VT_PSMCROSSTYPEASSTRING) &&
           verifier.VerifyString(psmCrossTypeAsString()) &&
           VerifyOffset(verifier, VT_FULLFILEPATH) &&
           verifier.VerifyString(fullFilePath()) &&
           VerifyOffset(verifier, VT_DIGESTIONPARAMSSTRING) &&
           verifier.VerifyString(digestionParamsString()) &&
           VerifyOffset(verifier, VT_LPOSITIONS) &&
           verifier.VerifyVector(lPositions()) &&
           VerifyOffset(verifier, VT_XLRANKS) &&
           verifier.VerifyVector(xlRanks()) &&
           VerifyOffset(verifier, VT_FDRINFO) &&
           verifier.VerifyTable(fdrInfo()) &&
           VerifyOffset(verifier, VT_PEPTIDE) &&
           verifier.VerifyTable(peptide()) &&
           VerifyOffset(verifier, VT_IONS) &&
           verifier.VerifyVector(ions()) &&
           verifier.VerifyVectorOfTables(ions()) &&
           verifier.EndTable();
  }
};

struct SerializedCrosslinkSpectralMatchBuilder {
  typedef SerializedCrosslinkSpectralMatch Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_notchValue(int32_t notchValue) {
    fbb_.AddElement<int32_t>(SerializedCrosslinkSpectralMatch::VT_NOTCHVALUE, notchValue, 0);
  }
  void add_scanNumber(int32_t scanNumber) {
    fbb_.AddElement<int32_t>(SerializedCrosslinkSpectralMatch::VT_SCANNUMBER, scanNumber, 0);
  }
  void add_xlProteinPos(int32_t xlProteinPos) {
    fbb_.AddElement<int32_t>(SerializedCrosslinkSpectralMatch::VT_XLPROTEINPOS, xlProteinPos, 0);
  }
  void add_matchedFragmentIonsSize(int32_t matchedFragmentIonsSize) {
    fbb_.AddElement<int32_t>(SerializedCrosslinkSpectralMatch::VT_MATCHEDFRAGMENTIONSSIZE, matchedFragmentIonsSize, 0);
  }
  void add_lPositionsSize(int32_t lPositionsSize) {
    fbb_.AddElement<int32_t>(SerializedCrosslinkSpectralMatch::VT_LPOSITIONSSIZE, lPositionsSize, 0);
  }
  void add_xlRanksSize(int32_t xlRanksSize) {
    fbb_.AddElement<int32_t>(SerializedCrosslinkSpectralMatch::VT_XLRANKSSIZE, xlRanksSize, 0);
  }
  void add_precursorScanNumber(int32_t precursorScanNumber) {
    fbb_.AddElement<int32_t>(SerializedCrosslinkSpectralMatch::VT_PRECURSORSCANNUMBER, precursorScanNumber, 0);
  }
  void add_scanExperimentalPeaks(int32_t scanExperimentalPeaks) {
    fbb_.AddElement<int32_t>(SerializedCrosslinkSpectralMatch::VT_SCANEXPERIMENTALPEAKS, scanExperimentalPeaks, 0);
  }
  void add_scanPrecursorCharge(int32_t scanPrecursorCharge) {
    fbb_.AddElement<int32_t>(SerializedCrosslinkSpectralMatch::VT_SCANPRECURSORCHARGE, scanPrecursorCharge, 0);
  }
  void add_xlTotalScore(double xlTotalScore) {
    fbb_.AddElement<double>(SerializedCrosslinkSpectralMatch::VT_XLTOTALSCORE, xlTotalScore, 0.0);
  }
  void add_deltaScore(double deltaScore) {
    fbb_.AddElement<double>(SerializedCrosslinkSpectralMatch::VT_DELTASCORE, deltaScore, 0.0);
  }
  void add_score(double score) {
    fbb_.AddElement<double>(SerializedCrosslinkSpectralMatch::VT_SCORE, score, 0.0);
  }
  void add_runnerUpScore(double runnerUpScore) {
    fbb_.AddElement<double>(SerializedCrosslinkSpectralMatch::VT_RUNNERUPSCORE, runnerUpScore, 0.0);
  }
  void add_peptideMonoisotopicMass(double peptideMonoisotopicMass) {
    fbb_.AddElement<double>(SerializedCrosslinkSpectralMatch::VT_PEPTIDEMONOISOTOPICMASS, peptideMonoisotopicMass, 0.0);
  }
  void add_scanRetentionTime(double scanRetentionTime) {
    fbb_.AddElement<double>(SerializedCrosslinkSpectralMatch::VT_SCANRETENTIONTIME, scanRetentionTime, 0.0);
  }
  void add_totalIonCurrent(double totalIonCurrent) {
    fbb_.AddElement<double>(SerializedCrosslinkSpectralMatch::VT_TOTALIONCURRENT, totalIonCurrent, 0.0);
  }
  void add_scanPrecursorMonoisotopicPeakMz(double scanPrecursorMonoisotopicPeakMz) {
    fbb_.AddElement<double>(SerializedCrosslinkSpectralMatch::VT_SCANPRECURSORMONOISOTOPICPEAKMZ, scanPrecursorMonoisotopicPeakMz, 0.0);
  }
  void add_scanPrecursorMass(double scanPrecursorMass) {
    fbb_.AddElement<double>(SerializedCrosslinkSpectralMatch::VT_SCANPRECURSORMASS, scanPrecursorMass, 0.0);
  }
  void add_hasNotchValue(bool hasNotchValue) {
    fbb_.AddElement<uint8_t>(SerializedCrosslinkSpectralMatch::VT_HASNOTCHVALUE, static_cast<uint8_t>(hasNotchValue), 0);
  }
  void add_hasBetaPeptide(bool hasBetaPeptide) {
    fbb_.AddElement<uint8_t>(SerializedCrosslinkSpectralMatch::VT_HASBETAPEPTIDE, static_cast<uint8_t>(hasBetaPeptide), 0);
  }
  void add_hasPrecursorScanNumber(bool hasPrecursorScanNumber) {
    fbb_.AddElement<uint8_t>(SerializedCrosslinkSpectralMatch::VT_HASPRECURSORSCANNUMBER, static_cast<uint8_t>(hasPrecursorScanNumber), 0);
  }
  void add_psmCrossTypeAsString(flatbuffers::Offset<flatbuffers::String> psmCrossTypeAsString) {
    fbb_.AddOffset(SerializedCrosslinkSpectralMatch::VT_PSMCROSSTYPEASSTRING, psmCrossTypeAsString);
  }
  void add_fullFilePath(flatbuffers::Offset<flatbuffers::String> fullFilePath) {
    fbb_.AddOffset(SerializedCrosslinkSpectralMatch::VT_FULLFILEPATH, fullFilePath);
  }
  void add_digestionParamsString(flatbuffers::Offset<flatbuffers::String> digestionParamsString) {
    fbb_.AddOffset(SerializedCrosslinkSpectralMatch::VT_DIGESTIONPARAMSSTRING, digestionParamsString);
  }
  void add_lPositions(flatbuffers::Offset<flatbuffers::Vector<int32_t>> lPositions) {
    fbb_.AddOffset(SerializedCrosslinkSpectralMatch::VT_LPOSITIONS, lPositions);
  }
  void add_xlRanks(flatbuffers::Offset<flatbuffers::Vector<int32_t>> xlRanks) {
    fbb_.AddOffset(SerializedCrosslinkSpectralMatch::VT_XLRANKS, xlRanks);
  }
  void add_fdrInfo(flatbuffers::Offset<SerializedFdrInfo> fdrInfo) {
    fbb_.AddOffset(SerializedCrosslinkSpectralMatch::VT_FDRINFO, fdrInfo);
  }
  void add_peptide(flatbuffers::Offset<SerializedPeptideWithSetModifications> peptide) {
    fbb_.AddOffset(SerializedCrosslinkSpectralMatch::VT_PEPTIDE, peptide);
  }
  void add_ions(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<SerializedMatchedFragmentIon>>> ions) {
    fbb_.AddOffset(SerializedCrosslinkSpectralMatch::VT_IONS, ions);
  }
  explicit SerializedCrosslinkSpectralMatchBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SerializedCrosslinkSpectralMatchBuilder &operator=(const SerializedCrosslinkSpectralMatchBuilder &);
  flatbuffers::Offset<SerializedCrosslinkSpectralMatch> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SerializedCrosslinkSpectralMatch>(end);
    return o;
  }
};

inline flatbuffers::Offset<SerializedCrosslinkSpectralMatch> CreateSerializedCrosslinkSpectralMatch(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t notchValue = 0,
    int32_t scanNumber = 0,
    int32_t xlProteinPos = 0,
    int32_t matchedFragmentIonsSize = 0,
    int32_t lPositionsSize = 0,
    int32_t xlRanksSize = 0,
    int32_t precursorScanNumber = 0,
    int32_t scanExperimentalPeaks = 0,
    int32_t scanPrecursorCharge = 0,
    double xlTotalScore = 0.0,
    double deltaScore = 0.0,
    double score = 0.0,
    double runnerUpScore = 0.0,
    double peptideMonoisotopicMass = 0.0,
    double scanRetentionTime = 0.0,
    double totalIonCurrent = 0.0,
    double scanPrecursorMonoisotopicPeakMz = 0.0,
    double scanPrecursorMass = 0.0,
    bool hasNotchValue = false,
    bool hasBetaPeptide = false,
    bool hasPrecursorScanNumber = false,
    flatbuffers::Offset<flatbuffers::String> psmCrossTypeAsString = 0,
    flatbuffers::Offset<flatbuffers::String> fullFilePath = 0,
    flatbuffers::Offset<flatbuffers::String> digestionParamsString = 0,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> lPositions = 0,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> xlRanks = 0,
    flatbuffers::Offset<SerializedFdrInfo> fdrInfo = 0,
    flatbuffers::Offset<SerializedPeptideWithSetModifications> peptide = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<SerializedMatchedFragmentIon>>> ions = 0) {
  SerializedCrosslinkSpectralMatchBuilder builder_(_fbb);
  builder_.add_scanPrecursorMass(scanPrecursorMass);
  builder_.add_scanPrecursorMonoisotopicPeakMz(scanPrecursorMonoisotopicPeakMz);
  builder_.add_totalIonCurrent(totalIonCurrent);
  builder_.add_scanRetentionTime(scanRetentionTime);
  builder_.add_peptideMonoisotopicMass(peptideMonoisotopicMass);
  builder_.add_runnerUpScore(runnerUpScore);
  builder_.add_score(score);
  builder_.add_deltaScore(deltaScore);
  builder_.add_xlTotalScore(xlTotalScore);
  builder_.add_ions(ions);
  builder_.add_peptide(peptide);
  builder_.add_fdrInfo(fdrInfo);
  builder_.add_xlRanks(xlRanks);
  builder_.add_lPositions(lPositions);
  builder_.add_digestionParamsString(digestionParamsString);
  builder_.add_fullFilePath(fullFilePath);
  builder_.add_psmCrossTypeAsString(psmCrossTypeAsString);
  builder_.add_scanPrecursorCharge(scanPrecursorCharge);
  builder_.add_scanExperimentalPeaks(scanExperimentalPeaks);
  builder_.add_precursorScanNumber(precursorScanNumber);
  builder_.add_xlRanksSize(xlRanksSize);
  builder_.add_lPositionsSize(lPositionsSize);
  builder_.add_matchedFragmentIonsSize(matchedFragmentIonsSize);
  builder_.add_xlProteinPos(xlProteinPos);
  builder_.add_scanNumber(scanNumber);
  builder_.add_notchValue(notchValue);
  builder_.add_hasPrecursorScanNumber(hasPrecursorScanNumber);
  builder_.add_hasBetaPeptide(hasBetaPeptide);
  builder_.add_hasNotchValue(hasNotchValue);
  return builder_.Finish();
}

inline flatbuffers::Offset<SerializedCrosslinkSpectralMatch> CreateSerializedCrosslinkSpectralMatchDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t notchValue = 0,
    int32_t scanNumber = 0,
    int32_t xlProteinPos = 0,
    int32_t matchedFragmentIonsSize = 0,
    int32_t lPositionsSize = 0,
    int32_t xlRanksSize = 0,
    int32_t precursorScanNumber = 0,
    int32_t scanExperimentalPeaks = 0,
    int32_t scanPrecursorCharge = 0,
    double xlTotalScore = 0.0,
    double deltaScore = 0.0,
    double score = 0.0,
    double runnerUpScore = 0.0,
    double peptideMonoisotopicMass = 0.0,
    double scanRetentionTime = 0.0,
    double totalIonCurrent = 0.0,
    double scanPrecursorMonoisotopicPeakMz = 0.0,
    double scanPrecursorMass = 0.0,
    bool hasNotchValue = false,
    bool hasBetaPeptide = false,
    bool hasPrecursorScanNumber = false,
    const char *psmCrossTypeAsString = nullptr,
    const char *fullFilePath = nullptr,
    const char *digestionParamsString = nullptr,
    const std::vector<int32_t> *lPositions = nullptr,
    const std::vector<int32_t> *xlRanks = nullptr,
    flatbuffers::Offset<SerializedFdrInfo> fdrInfo = 0,
    flatbuffers::Offset<SerializedPeptideWithSetModifications> peptide = 0,
    const std::vector<flatbuffers::Offset<SerializedMatchedFragmentIon>> *ions = nullptr) {
  auto psmCrossTypeAsString__ = psmCrossTypeAsString ? _fbb.CreateString(psmCrossTypeAsString) : 0;
  auto fullFilePath__ = fullFilePath ? _fbb.CreateString(fullFilePath) : 0;
  auto digestionParamsString__ = digestionParamsString ? _fbb.CreateString(digestionParamsString) : 0;
  auto lPositions__ = lPositions ? _fbb.CreateVector<int32_t>(*lPositions) : 0;
  auto xlRanks__ = xlRanks ? _fbb.CreateVector<int32_t>(*xlRanks) : 0;
  auto ions__ = ions ? _fbb.CreateVector<flatbuffers::Offset<SerializedMatchedFragmentIon>>(*ions) : 0;
  return CreateSerializedCrosslinkSpectralMatch(
      _fbb,
      notchValue,
      scanNumber,
      xlProteinPos,
      matchedFragmentIonsSize,
      lPositionsSize,
      xlRanksSize,
      precursorScanNumber,
      scanExperimentalPeaks,
      scanPrecursorCharge,
      xlTotalScore,
      deltaScore,
      score,
      runnerUpScore,
      peptideMonoisotopicMass,
      scanRetentionTime,
      totalIonCurrent,
      scanPrecursorMonoisotopicPeakMz,
      scanPrecursorMass,
      hasNotchValue,
      hasBetaPeptide,
      hasPrecursorScanNumber,
      psmCrossTypeAsString__,
      fullFilePath__,
      digestionParamsString__,
      lPositions__,
      xlRanks__,
      fdrInfo,
      peptide,
      ions__);
}

struct SerializedCrosslinkSpectralMatchVec FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SerializedCrosslinkSpectralMatchVecBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CSMS = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<SerializedCrosslinkSpectralMatch>> *csms() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<SerializedCrosslinkSpectralMatch>> *>(VT_CSMS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CSMS) &&
           verifier.VerifyVector(csms()) &&
           verifier.VerifyVectorOfTables(csms()) &&
           verifier.EndTable();
  }
};

struct SerializedCrosslinkSpectralMatchVecBuilder {
  typedef SerializedCrosslinkSpectralMatchVec Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_csms(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<SerializedCrosslinkSpectralMatch>>> csms) {
    fbb_.AddOffset(SerializedCrosslinkSpectralMatchVec::VT_CSMS, csms);
  }
  explicit SerializedCrosslinkSpectralMatchVecBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SerializedCrosslinkSpectralMatchVecBuilder &operator=(const SerializedCrosslinkSpectralMatchVecBuilder &);
  flatbuffers::Offset<SerializedCrosslinkSpectralMatchVec> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SerializedCrosslinkSpectralMatchVec>(end);
    return o;
  }
};

inline flatbuffers::Offset<SerializedCrosslinkSpectralMatchVec> CreateSerializedCrosslinkSpectralMatchVec(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<SerializedCrosslinkSpectralMatch>>> csms = 0) {
  SerializedCrosslinkSpectralMatchVecBuilder builder_(_fbb);
  builder_.add_csms(csms);
  return builder_.Finish();
}

inline flatbuffers::Offset<SerializedCrosslinkSpectralMatchVec> CreateSerializedCrosslinkSpectralMatchVecDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<SerializedCrosslinkSpectralMatch>> *csms = nullptr) {
  auto csms__ = csms ? _fbb.CreateVector<flatbuffers::Offset<SerializedCrosslinkSpectralMatch>>(*csms) : 0;
  return CreateSerializedCrosslinkSpectralMatchVec(
      _fbb,
      csms__);
}

inline const SerializedCrosslinkSpectralMatchVec *GetSerializedCrosslinkSpectralMatchVec(const void *buf) {
  return flatbuffers::GetRoot<SerializedCrosslinkSpectralMatchVec>(buf);
}

inline const SerializedCrosslinkSpectralMatchVec *GetSizePrefixedSerializedCrosslinkSpectralMatchVec(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<SerializedCrosslinkSpectralMatchVec>(buf);
}

inline bool VerifySerializedCrosslinkSpectralMatchVecBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<SerializedCrosslinkSpectralMatchVec>(nullptr);
}

inline bool VerifySizePrefixedSerializedCrosslinkSpectralMatchVecBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<SerializedCrosslinkSpectralMatchVec>(nullptr);
}

inline void FinishSerializedCrosslinkSpectralMatchVecBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<SerializedCrosslinkSpectralMatchVec> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedSerializedCrosslinkSpectralMatchVecBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<SerializedCrosslinkSpectralMatchVec> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_CROSSLINKSPECTRALMATCH_H_
