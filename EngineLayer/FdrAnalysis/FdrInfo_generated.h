// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FDRINFO_H_
#define FLATBUFFERS_GENERATED_FDRINFO_H_

#include "flatbuffers/flatbuffers.h"

struct SerializedFdrInfo;
struct SerializedFdrInfoBuilder;

struct SerializedFdrInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SerializedFdrInfoBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CUMULATIVETARGET = 4,
    VT_CUMULATIVEDECOY = 6,
    VT_QVALUE = 8,
    VT_CUMULATIVETARGETNOTCH = 10,
    VT_CUMULATIVEDECOYNOTCH = 12,
    VT_QVALUENOTCH = 14,
    VT_MAXIMUMLIKELIHOOD = 16,
    VT_EVALUE = 18,
    VT_ESCORE = 20,
    VT_CALCULATEEVALUE = 22,
    VT_HASFDR = 24
  };

  double cumulativeTarget() const {
    return GetField<double>(VT_CUMULATIVETARGET, 0.0);
  }
  double cumulativeDecoy() const {
    return GetField<double>(VT_CUMULATIVEDECOY, 0.0);
  }
  double qValue() const {
    return GetField<double>(VT_QVALUE, 0.0);
  }
  double cumulativeTargetNotch() const {
    return GetField<double>(VT_CUMULATIVETARGETNOTCH, 0.0);
  }
  double cumulativeDecoyNotch() const {
    return GetField<double>(VT_CUMULATIVEDECOYNOTCH, 0.0);
  }
  double qValueNotch() const {
    return GetField<double>(VT_QVALUENOTCH, 0.0);
  }
  double maximumLikelihood() const {
    return GetField<double>(VT_MAXIMUMLIKELIHOOD, 0.0);
  }
  double eValue() const {
    return GetField<double>(VT_EVALUE, 0.0);
  }
  double eScore() const {
    return GetField<double>(VT_ESCORE, 0.0);
  }
  bool calculateEValue() const {
    return GetField<uint8_t>(VT_CALCULATEEVALUE, 0) != 0;
  }
  bool hasFdr() const {
    return GetField<uint8_t>(VT_HASFDR, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<double>(verifier, VT_CUMULATIVETARGET) &&
           VerifyField<double>(verifier, VT_CUMULATIVEDECOY) &&
           VerifyField<double>(verifier, VT_QVALUE) &&
           VerifyField<double>(verifier, VT_CUMULATIVETARGETNOTCH) &&
           VerifyField<double>(verifier, VT_CUMULATIVEDECOYNOTCH) &&
           VerifyField<double>(verifier, VT_QVALUENOTCH) &&
           VerifyField<double>(verifier, VT_MAXIMUMLIKELIHOOD) &&
           VerifyField<double>(verifier, VT_EVALUE) &&
           VerifyField<double>(verifier, VT_ESCORE) &&
           VerifyField<uint8_t>(verifier, VT_CALCULATEEVALUE) &&
           VerifyField<uint8_t>(verifier, VT_HASFDR) &&
           verifier.EndTable();
  }
};

struct SerializedFdrInfoBuilder {
  typedef SerializedFdrInfo Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_cumulativeTarget(double cumulativeTarget) {
    fbb_.AddElement<double>(SerializedFdrInfo::VT_CUMULATIVETARGET, cumulativeTarget, 0.0);
  }
  void add_cumulativeDecoy(double cumulativeDecoy) {
    fbb_.AddElement<double>(SerializedFdrInfo::VT_CUMULATIVEDECOY, cumulativeDecoy, 0.0);
  }
  void add_qValue(double qValue) {
    fbb_.AddElement<double>(SerializedFdrInfo::VT_QVALUE, qValue, 0.0);
  }
  void add_cumulativeTargetNotch(double cumulativeTargetNotch) {
    fbb_.AddElement<double>(SerializedFdrInfo::VT_CUMULATIVETARGETNOTCH, cumulativeTargetNotch, 0.0);
  }
  void add_cumulativeDecoyNotch(double cumulativeDecoyNotch) {
    fbb_.AddElement<double>(SerializedFdrInfo::VT_CUMULATIVEDECOYNOTCH, cumulativeDecoyNotch, 0.0);
  }
  void add_qValueNotch(double qValueNotch) {
    fbb_.AddElement<double>(SerializedFdrInfo::VT_QVALUENOTCH, qValueNotch, 0.0);
  }
  void add_maximumLikelihood(double maximumLikelihood) {
    fbb_.AddElement<double>(SerializedFdrInfo::VT_MAXIMUMLIKELIHOOD, maximumLikelihood, 0.0);
  }
  void add_eValue(double eValue) {
    fbb_.AddElement<double>(SerializedFdrInfo::VT_EVALUE, eValue, 0.0);
  }
  void add_eScore(double eScore) {
    fbb_.AddElement<double>(SerializedFdrInfo::VT_ESCORE, eScore, 0.0);
  }
  void add_calculateEValue(bool calculateEValue) {
    fbb_.AddElement<uint8_t>(SerializedFdrInfo::VT_CALCULATEEVALUE, static_cast<uint8_t>(calculateEValue), 0);
  }
  void add_hasFdr(bool hasFdr) {
    fbb_.AddElement<uint8_t>(SerializedFdrInfo::VT_HASFDR, static_cast<uint8_t>(hasFdr), 0);
  }
  explicit SerializedFdrInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SerializedFdrInfoBuilder &operator=(const SerializedFdrInfoBuilder &);
  flatbuffers::Offset<SerializedFdrInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SerializedFdrInfo>(end);
    return o;
  }
};

inline flatbuffers::Offset<SerializedFdrInfo> CreateSerializedFdrInfo(
    flatbuffers::FlatBufferBuilder &_fbb,
    double cumulativeTarget = 0.0,
    double cumulativeDecoy = 0.0,
    double qValue = 0.0,
    double cumulativeTargetNotch = 0.0,
    double cumulativeDecoyNotch = 0.0,
    double qValueNotch = 0.0,
    double maximumLikelihood = 0.0,
    double eValue = 0.0,
    double eScore = 0.0,
    bool calculateEValue = false,
    bool hasFdr = false) {
  SerializedFdrInfoBuilder builder_(_fbb);
  builder_.add_eScore(eScore);
  builder_.add_eValue(eValue);
  builder_.add_maximumLikelihood(maximumLikelihood);
  builder_.add_qValueNotch(qValueNotch);
  builder_.add_cumulativeDecoyNotch(cumulativeDecoyNotch);
  builder_.add_cumulativeTargetNotch(cumulativeTargetNotch);
  builder_.add_qValue(qValue);
  builder_.add_cumulativeDecoy(cumulativeDecoy);
  builder_.add_cumulativeTarget(cumulativeTarget);
  builder_.add_hasFdr(hasFdr);
  builder_.add_calculateEValue(calculateEValue);
  return builder_.Finish();
}

inline const SerializedFdrInfo *GetSerializedFdrInfo(const void *buf) {
  return flatbuffers::GetRoot<SerializedFdrInfo>(buf);
}

inline const SerializedFdrInfo *GetSizePrefixedSerializedFdrInfo(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<SerializedFdrInfo>(buf);
}

inline bool VerifySerializedFdrInfoBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<SerializedFdrInfo>(nullptr);
}

inline bool VerifySizePrefixedSerializedFdrInfoBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<SerializedFdrInfo>(nullptr);
}

inline void FinishSerializedFdrInfoBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<SerializedFdrInfo> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedSerializedFdrInfoBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<SerializedFdrInfo> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_FDRINFO_H_
